import axios, { AxiosInstance } from 'axios'
import camelCaseKeys from 'camelcase-keys'

import { ClientConfig } from './core/ClientConfig'
{{#each services}}
import { {{{name}}}Service } from './services/{{{name}}}Service.js';
{{/each}}

function applyMixins(derivedCtor: any, constructors: any[]) {
    constructors.forEach((baseCtor) => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
            Object.defineProperty(
                derivedCtor.prototype,
                name,
                Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || Object.create(null),
            )
        })
    })
}

export class LuneClient {
    protected client: AxiosInstance
    protected config: ClientConfig

    constructor(
        apiKey: string,
        baseUrl: string = 'https://api.lune.co',
        apiVersion: string = '1',
        account?: string,
    ) {
        this.config = {
            BASE_URL: `${baseUrl}/v{api-version}`,
            VERSION: apiVersion,
            BEARER_TOKEN: apiKey,
            ACCOUNT: account,
        }
        this.client = axios.create()

        // Convert to camelCase when receiving request
        this.client.interceptors.response.use((response) => {
            return { ...response, data: camelCaseKeys(response.data, { deep: true }) }
        })
    }

    public setAccount(accountId: string) {
        this.config.ACCOUNT = accountId
    }

    /**
     * Perform an action with the current account being set to a desired one.
     *
     * The account will only be overridden for the duration of the action and will be restored
     * to the previous value at the end (when the result of withAccount() is awaited). The
     * account is also restored in case of an exception.
     *
     * This method modifies the internal state of LuneClient. Calling withAccount() or
     * setAccount() concurrently from multiple contexts at the same time is not supported and
     * will result in undefined behavior.
     *
     * The action's return value is returned by this function as-is.
     */
    public async withAccount<T>(accountId: string, action: () => Promise<T>): Promise<T> {
        const previousAccountId = this.config.ACCOUNT
        try {
            this.config.ACCOUNT = accountId
            return await action()
        }
        finally {
            this.config.ACCOUNT = previousAccountId
        }
    }
}

applyMixins(LuneClient, [
    {{#if services}}
    {{#each services}}
    {{{name}}}Service,
    {{/each}}
    {{/if}}
])

// eslint-disable-next-line no-redeclare -- mixins require same name
export interface LuneClient extends
    {{#each services}}
    {{{name}}}Service{{#unless @last}},{{/unless}}
    {{/each}} {}

{{#each models}}
{{#if @root.useUnionTypes}}
export type { {{{name}}} } from './models/{{{name}}}.js';
{{else if enum}}
export { {{{name}}} } from './models/{{{name}}}.js';
{{else if enums}}
export { {{{name}}} } from './models/{{{name}}}.js';
{{else}}
export type { {{{name}}} } from './models/{{{name}}}.js';
{{/if}}
{{/each}}

{{#each services}}
export { {{{name}}}Service } from './services/{{{name}}}Service.js';
{{/each}}
